/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package ps.customer.event.avro;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class DomicileLockChangedEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8153316527974462350L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DomicileLockChangedEvent\",\"namespace\":\"ps.customer.event.avro\",\"fields\":[{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"changeType\",\"type\":\"int\"},{\"name\":\"changeDate\",\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},{\"name\":\"accountType\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"creditCardBrand\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"transactionType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"codAgency\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"codAccount\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"paymentAccount\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
   private java.lang.String customerId;
   private int changeType;
   private long changeDate;
   private java.lang.String accountType;
   private java.lang.String creditCardBrand;
   private java.lang.String transactionType;
   private java.lang.Integer codAgency;
   private java.lang.Integer codAccount;
   private java.lang.String paymentAccount;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public DomicileLockChangedEvent() {}

  /**
   * All-args constructor.
   * @param customerId The new value for customerId
   * @param changeType The new value for changeType
   * @param changeDate The new value for changeDate
   * @param accountType The new value for accountType
   * @param creditCardBrand The new value for creditCardBrand
   * @param transactionType The new value for transactionType
   * @param codAgency The new value for codAgency
   * @param codAccount The new value for codAccount
   * @param paymentAccount The new value for paymentAccount
   */
  public DomicileLockChangedEvent(java.lang.String customerId, java.lang.Integer changeType, java.lang.Long changeDate, java.lang.String accountType, java.lang.String creditCardBrand, java.lang.String transactionType, java.lang.Integer codAgency, java.lang.Integer codAccount, java.lang.String paymentAccount) {
    this.customerId = customerId;
    this.changeType = changeType;
    this.changeDate = changeDate;
    this.accountType = accountType;
    this.creditCardBrand = creditCardBrand;
    this.transactionType = transactionType;
    this.codAgency = codAgency;
    this.codAccount = codAccount;
    this.paymentAccount = paymentAccount;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return customerId;
    case 1: return changeType;
    case 2: return changeDate;
    case 3: return accountType;
    case 4: return creditCardBrand;
    case 5: return transactionType;
    case 6: return codAgency;
    case 7: return codAccount;
    case 8: return paymentAccount;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: customerId = (java.lang.String)value$; break;
    case 1: changeType = (java.lang.Integer)value$; break;
    case 2: changeDate = (java.lang.Long)value$; break;
    case 3: accountType = (java.lang.String)value$; break;
    case 4: creditCardBrand = (java.lang.String)value$; break;
    case 5: transactionType = (java.lang.String)value$; break;
    case 6: codAgency = (java.lang.Integer)value$; break;
    case 7: codAccount = (java.lang.Integer)value$; break;
    case 8: paymentAccount = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'customerId' field.
   * @return The value of the 'customerId' field.
   */
  public java.lang.String getCustomerId() {
    return customerId;
  }


  /**
   * Gets the value of the 'changeType' field.
   * @return The value of the 'changeType' field.
   */
  public java.lang.Integer getChangeType() {
    return changeType;
  }


  /**
   * Gets the value of the 'changeDate' field.
   * @return The value of the 'changeDate' field.
   */
  public java.lang.Long getChangeDate() {
    return changeDate;
  }


  /**
   * Gets the value of the 'accountType' field.
   * @return The value of the 'accountType' field.
   */
  public java.lang.String getAccountType() {
    return accountType;
  }


  /**
   * Gets the value of the 'creditCardBrand' field.
   * @return The value of the 'creditCardBrand' field.
   */
  public java.lang.String getCreditCardBrand() {
    return creditCardBrand;
  }


  /**
   * Gets the value of the 'transactionType' field.
   * @return The value of the 'transactionType' field.
   */
  public java.lang.String getTransactionType() {
    return transactionType;
  }


  /**
   * Gets the value of the 'codAgency' field.
   * @return The value of the 'codAgency' field.
   */
  public java.lang.Integer getCodAgency() {
    return codAgency;
  }


  /**
   * Gets the value of the 'codAccount' field.
   * @return The value of the 'codAccount' field.
   */
  public java.lang.Integer getCodAccount() {
    return codAccount;
  }


  /**
   * Gets the value of the 'paymentAccount' field.
   * @return The value of the 'paymentAccount' field.
   */
  public java.lang.String getPaymentAccount() {
    return paymentAccount;
  }


  /**
   * Creates a new DomicileLockChangedEvent RecordBuilder.
   * @return A new DomicileLockChangedEvent RecordBuilder
   */
  public static ps.customer.event.avro.DomicileLockChangedEvent.Builder newBuilder() {
    return new ps.customer.event.avro.DomicileLockChangedEvent.Builder();
  }

  /**
   * Creates a new DomicileLockChangedEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new DomicileLockChangedEvent RecordBuilder
   */
  public static ps.customer.event.avro.DomicileLockChangedEvent.Builder newBuilder(ps.customer.event.avro.DomicileLockChangedEvent.Builder other) {
    return new ps.customer.event.avro.DomicileLockChangedEvent.Builder(other);
  }

  /**
   * Creates a new DomicileLockChangedEvent RecordBuilder by copying an existing DomicileLockChangedEvent instance.
   * @param other The existing instance to copy.
   * @return A new DomicileLockChangedEvent RecordBuilder
   */
  public static ps.customer.event.avro.DomicileLockChangedEvent.Builder newBuilder(ps.customer.event.avro.DomicileLockChangedEvent other) {
    return new ps.customer.event.avro.DomicileLockChangedEvent.Builder(other);
  }

  /**
   * RecordBuilder for DomicileLockChangedEvent instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DomicileLockChangedEvent>
    implements org.apache.avro.data.RecordBuilder<DomicileLockChangedEvent> {

    private java.lang.String customerId;
    private int changeType;
    private long changeDate;
    private java.lang.String accountType;
    private java.lang.String creditCardBrand;
    private java.lang.String transactionType;
    private java.lang.Integer codAgency;
    private java.lang.Integer codAccount;
    private java.lang.String paymentAccount;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(ps.customer.event.avro.DomicileLockChangedEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.customerId)) {
        this.customerId = data().deepCopy(fields()[0].schema(), other.customerId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.changeType)) {
        this.changeType = data().deepCopy(fields()[1].schema(), other.changeType);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.changeDate)) {
        this.changeDate = data().deepCopy(fields()[2].schema(), other.changeDate);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.accountType)) {
        this.accountType = data().deepCopy(fields()[3].schema(), other.accountType);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.creditCardBrand)) {
        this.creditCardBrand = data().deepCopy(fields()[4].schema(), other.creditCardBrand);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.transactionType)) {
        this.transactionType = data().deepCopy(fields()[5].schema(), other.transactionType);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.codAgency)) {
        this.codAgency = data().deepCopy(fields()[6].schema(), other.codAgency);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.codAccount)) {
        this.codAccount = data().deepCopy(fields()[7].schema(), other.codAccount);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.paymentAccount)) {
        this.paymentAccount = data().deepCopy(fields()[8].schema(), other.paymentAccount);
        fieldSetFlags()[8] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing DomicileLockChangedEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(ps.customer.event.avro.DomicileLockChangedEvent other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.customerId)) {
        this.customerId = data().deepCopy(fields()[0].schema(), other.customerId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.changeType)) {
        this.changeType = data().deepCopy(fields()[1].schema(), other.changeType);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.changeDate)) {
        this.changeDate = data().deepCopy(fields()[2].schema(), other.changeDate);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.accountType)) {
        this.accountType = data().deepCopy(fields()[3].schema(), other.accountType);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.creditCardBrand)) {
        this.creditCardBrand = data().deepCopy(fields()[4].schema(), other.creditCardBrand);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.transactionType)) {
        this.transactionType = data().deepCopy(fields()[5].schema(), other.transactionType);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.codAgency)) {
        this.codAgency = data().deepCopy(fields()[6].schema(), other.codAgency);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.codAccount)) {
        this.codAccount = data().deepCopy(fields()[7].schema(), other.codAccount);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.paymentAccount)) {
        this.paymentAccount = data().deepCopy(fields()[8].schema(), other.paymentAccount);
        fieldSetFlags()[8] = true;
      }
    }

    /**
      * Gets the value of the 'customerId' field.
      * @return The value.
      */
    public java.lang.String getCustomerId() {
      return customerId;
    }

    /**
      * Sets the value of the 'customerId' field.
      * @param value The value of 'customerId'.
      * @return This builder.
      */
    public ps.customer.event.avro.DomicileLockChangedEvent.Builder setCustomerId(java.lang.String value) {
      validate(fields()[0], value);
      this.customerId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'customerId' field has been set.
      * @return True if the 'customerId' field has been set, false otherwise.
      */
    public boolean hasCustomerId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'customerId' field.
      * @return This builder.
      */
    public ps.customer.event.avro.DomicileLockChangedEvent.Builder clearCustomerId() {
      customerId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'changeType' field.
      * @return The value.
      */
    public java.lang.Integer getChangeType() {
      return changeType;
    }

    /**
      * Sets the value of the 'changeType' field.
      * @param value The value of 'changeType'.
      * @return This builder.
      */
    public ps.customer.event.avro.DomicileLockChangedEvent.Builder setChangeType(int value) {
      validate(fields()[1], value);
      this.changeType = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'changeType' field has been set.
      * @return True if the 'changeType' field has been set, false otherwise.
      */
    public boolean hasChangeType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'changeType' field.
      * @return This builder.
      */
    public ps.customer.event.avro.DomicileLockChangedEvent.Builder clearChangeType() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'changeDate' field.
      * @return The value.
      */
    public java.lang.Long getChangeDate() {
      return changeDate;
    }

    /**
      * Sets the value of the 'changeDate' field.
      * @param value The value of 'changeDate'.
      * @return This builder.
      */
    public ps.customer.event.avro.DomicileLockChangedEvent.Builder setChangeDate(long value) {
      validate(fields()[2], value);
      this.changeDate = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'changeDate' field has been set.
      * @return True if the 'changeDate' field has been set, false otherwise.
      */
    public boolean hasChangeDate() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'changeDate' field.
      * @return This builder.
      */
    public ps.customer.event.avro.DomicileLockChangedEvent.Builder clearChangeDate() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'accountType' field.
      * @return The value.
      */
    public java.lang.String getAccountType() {
      return accountType;
    }

    /**
      * Sets the value of the 'accountType' field.
      * @param value The value of 'accountType'.
      * @return This builder.
      */
    public ps.customer.event.avro.DomicileLockChangedEvent.Builder setAccountType(java.lang.String value) {
      validate(fields()[3], value);
      this.accountType = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'accountType' field has been set.
      * @return True if the 'accountType' field has been set, false otherwise.
      */
    public boolean hasAccountType() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'accountType' field.
      * @return This builder.
      */
    public ps.customer.event.avro.DomicileLockChangedEvent.Builder clearAccountType() {
      accountType = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'creditCardBrand' field.
      * @return The value.
      */
    public java.lang.String getCreditCardBrand() {
      return creditCardBrand;
    }

    /**
      * Sets the value of the 'creditCardBrand' field.
      * @param value The value of 'creditCardBrand'.
      * @return This builder.
      */
    public ps.customer.event.avro.DomicileLockChangedEvent.Builder setCreditCardBrand(java.lang.String value) {
      validate(fields()[4], value);
      this.creditCardBrand = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'creditCardBrand' field has been set.
      * @return True if the 'creditCardBrand' field has been set, false otherwise.
      */
    public boolean hasCreditCardBrand() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'creditCardBrand' field.
      * @return This builder.
      */
    public ps.customer.event.avro.DomicileLockChangedEvent.Builder clearCreditCardBrand() {
      creditCardBrand = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'transactionType' field.
      * @return The value.
      */
    public java.lang.String getTransactionType() {
      return transactionType;
    }

    /**
      * Sets the value of the 'transactionType' field.
      * @param value The value of 'transactionType'.
      * @return This builder.
      */
    public ps.customer.event.avro.DomicileLockChangedEvent.Builder setTransactionType(java.lang.String value) {
      validate(fields()[5], value);
      this.transactionType = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'transactionType' field has been set.
      * @return True if the 'transactionType' field has been set, false otherwise.
      */
    public boolean hasTransactionType() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'transactionType' field.
      * @return This builder.
      */
    public ps.customer.event.avro.DomicileLockChangedEvent.Builder clearTransactionType() {
      transactionType = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'codAgency' field.
      * @return The value.
      */
    public java.lang.Integer getCodAgency() {
      return codAgency;
    }

    /**
      * Sets the value of the 'codAgency' field.
      * @param value The value of 'codAgency'.
      * @return This builder.
      */
    public ps.customer.event.avro.DomicileLockChangedEvent.Builder setCodAgency(java.lang.Integer value) {
      validate(fields()[6], value);
      this.codAgency = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'codAgency' field has been set.
      * @return True if the 'codAgency' field has been set, false otherwise.
      */
    public boolean hasCodAgency() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'codAgency' field.
      * @return This builder.
      */
    public ps.customer.event.avro.DomicileLockChangedEvent.Builder clearCodAgency() {
      codAgency = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'codAccount' field.
      * @return The value.
      */
    public java.lang.Integer getCodAccount() {
      return codAccount;
    }

    /**
      * Sets the value of the 'codAccount' field.
      * @param value The value of 'codAccount'.
      * @return This builder.
      */
    public ps.customer.event.avro.DomicileLockChangedEvent.Builder setCodAccount(java.lang.Integer value) {
      validate(fields()[7], value);
      this.codAccount = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'codAccount' field has been set.
      * @return True if the 'codAccount' field has been set, false otherwise.
      */
    public boolean hasCodAccount() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'codAccount' field.
      * @return This builder.
      */
    public ps.customer.event.avro.DomicileLockChangedEvent.Builder clearCodAccount() {
      codAccount = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'paymentAccount' field.
      * @return The value.
      */
    public java.lang.String getPaymentAccount() {
      return paymentAccount;
    }

    /**
      * Sets the value of the 'paymentAccount' field.
      * @param value The value of 'paymentAccount'.
      * @return This builder.
      */
    public ps.customer.event.avro.DomicileLockChangedEvent.Builder setPaymentAccount(java.lang.String value) {
      validate(fields()[8], value);
      this.paymentAccount = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'paymentAccount' field has been set.
      * @return True if the 'paymentAccount' field has been set, false otherwise.
      */
    public boolean hasPaymentAccount() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'paymentAccount' field.
      * @return This builder.
      */
    public ps.customer.event.avro.DomicileLockChangedEvent.Builder clearPaymentAccount() {
      paymentAccount = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    @Override
    public DomicileLockChangedEvent build() {
      try {
        DomicileLockChangedEvent record = new DomicileLockChangedEvent();
        record.customerId = fieldSetFlags()[0] ? this.customerId : (java.lang.String) defaultValue(fields()[0]);
        record.changeType = fieldSetFlags()[1] ? this.changeType : (java.lang.Integer) defaultValue(fields()[1]);
        record.changeDate = fieldSetFlags()[2] ? this.changeDate : (java.lang.Long) defaultValue(fields()[2]);
        record.accountType = fieldSetFlags()[3] ? this.accountType : (java.lang.String) defaultValue(fields()[3]);
        record.creditCardBrand = fieldSetFlags()[4] ? this.creditCardBrand : (java.lang.String) defaultValue(fields()[4]);
        record.transactionType = fieldSetFlags()[5] ? this.transactionType : (java.lang.String) defaultValue(fields()[5]);
        record.codAgency = fieldSetFlags()[6] ? this.codAgency : (java.lang.Integer) defaultValue(fields()[6]);
        record.codAccount = fieldSetFlags()[7] ? this.codAccount : (java.lang.Integer) defaultValue(fields()[7]);
        record.paymentAccount = fieldSetFlags()[8] ? this.paymentAccount : (java.lang.String) defaultValue(fields()[8]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
